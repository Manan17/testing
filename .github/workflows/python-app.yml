name: Push Benchmark to gh-pages

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  publish-benchmark:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      GITHUB_USERNAME: Manan17
      REPO_NAME: testing
      OUTPUT_DIR: benchmarks
      OUTPUT_FILENAME: benchmark.csv
      BENCHMARK_SCRIPT: dev/benchmarks.py
      GENERATED_CSV: data/all_benchmark_data.csv
      COMMIT_JSON: commits.json

    steps:
      # Step 1: Checkout main branch
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Step 2: Get the current commit hash
      - name: Get commit hash
        id: get_hash
        run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # Step 3: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Step 4: Install dependencies and run benchmark script
      - name: Install dependencies and run benchmarks.py
        run: |
          python -m pip install --upgrade pip pandas
          python $BENCHMARK_SCRIPT

      # Step 5: Checkout gh-pages branch into a subfolder
      - name: Checkout gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
          token: ${{ secrets.GH_TOKEN }}

      # Step 6: Copy benchmark to gh-pages
      - name: Copy generated benchmark to gh-pages
        run: |
          mkdir -p gh-pages/${OUTPUT_DIR}/${{ steps.get_hash.outputs.hash }}
          cp ${GENERATED_CSV} gh-pages/${OUTPUT_DIR}/${{ steps.get_hash.outputs.hash }}/${OUTPUT_FILENAME}

      - name: Update commit.json
        run: |
          cd gh-pages
          COMMIT_FILE="${{ env.COMMIT_JSON }}"
          COMMIT_HASH="${{ steps.get_hash.outputs.hash }}"

          if [ -f "$COMMIT_FILE" ]; then
            echo "commit.json exists, updating..."
            python3 -c "
import json
f = '$COMMIT_FILE'
h = '$COMMIT_HASH'
with open(f, 'r') as file:
    data = json.load(file)
if h not in data.get('commits', []):
    data['commits'].append(h)
with open(f, 'w') as file:
    json.dump(data, file, indent=2)
"
          else
            echo "commit.json does not exist, creating..."
            echo '{ \"commits\": [\"'"$COMMIT_HASH"'\" ] }' > "$COMMIT_FILE"
          fi

      # Step 8: Commit and push all changes
      - name: Commit and push to gh-pages
        run: |
          cd gh-pages
          git config user.name "GitHub Action Bot"
          git config user.email "action@github.com"
          git add .
          git commit -m "Add benchmark for commit ${{ steps.get_hash.outputs.hash }}" || echo "No changes to commit"
          git push origin gh-pages
